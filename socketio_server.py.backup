"""
SocketIO Server for real-time communication between Streamlit GUI and Multi-Agent System.
"""
import asyncio
import logging
import time
import uuid
from typing import Dict, Any, Optional
from datetime import datetime

import socketio
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv
import os

# Load environment variables from .env file
# Try multiple paths for different environments
env_paths = [
    '.env',  # Current directory (Docker)
    '../.env',  # Parent directory (local development)
    '/app/.env'  # Absolute path in container
]

for env_path in env_paths:
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"‚úÖ Loaded environment from: {env_path}")
        break
else:
    print("‚ö†Ô∏è No .env file found, using system environment variables")

from graph import create_agent_graph, create_initial_state
from gui.database.models import (
    init_database, save_chat_message, get_conversation_context,
    create_user, get_user, create_chat_session, get_user_sessions, db_config
)
from gui.utils.redis_cache import RedisCache
from src.config.settings import config

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize database and cache
if not init_database():
    logger.error("‚ùå Failed to initialize database")
    exit(1)

# Initialize Redis cache
redis_cache = RedisCache(db_config.redis_client)

# Create SocketIO server with eventlet
sio = socketio.Server(
    cors_allowed_origins="*",
    logger=True,
    engineio_logger=True
)

# Create FastAPI app for health endpoints
app = FastAPI(title="Multi-Agent SocketIO Server")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Create SocketIO WSGI app
socketio_wsgi_app = socketio.WSGIApp(sio)

# Global variables
agent_graph = None
connected_clients: Dict[str, Dict[str, Any]] = {}
startup_time = time.time()


async def initialize_agent_graph():
    """Initialize the agent graph."""
    global agent_graph
    try:
        agent_graph = create_agent_graph()
        logger.info("‚úÖ Agent graph initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize agent graph: {e}")
        raise


@sio.event
def connect(sid, environ):
    """Handle client connection."""
    logger.info(f"üîå Client connected: {sid}")
    connected_clients[sid] = {
        "connected_at": datetime.utcnow(),
        "user_id": None,
        "session_id": None
    }
    
    await sio.emit("connection_status", {
        "status": "connected",
        "message": "Connected to Multi-Agent System",
        "timestamp": time.time()
    }, room=sid)


@sio.event
def disconnect(sid):
    """Handle client disconnection."""
    logger.info(f"üîå Client disconnected: {sid}")
    if sid in connected_clients:
        del connected_clients[sid]


@sio.event
async def authenticate(sid, data):
    """Handle user authentication with Redis caching."""
    try:
        user_id = data.get("user_id")
        if not user_id:
            await sio.emit("auth_error", {
                "error": "user_id is required"
            }, room=sid)
            return

        # Try to get user from cache first
        cached_user = redis_cache.get_user_cache(user_id)
        if cached_user:
            user = cached_user
            logger.info(f"üë§ User authenticated from cache: {user_id}")
        else:
            # Get or create user from database
            user = get_user(user_id)
            if not user:
                user = create_user(
                    user_id=user_id,
                    display_name=data.get("display_name"),
                    email=data.get("email")
                )
                logger.info(f"üë§ Created new user: {user_id}")
            else:
                logger.info(f"üë§ User authenticated: {user_id}")

            # Cache user data
            redis_cache.set_user_cache(user_id, user.to_dict() if hasattr(user, 'to_dict') else user.__dict__)

        # Update client info
        connected_clients[sid]["user_id"] = user_id

        # Get user's recent sessions
        recent_sessions = get_user_sessions(user_id, limit=10)

        # Handle user data (could be User object or dict from cache)
        if isinstance(user, dict):
            display_name = user.get('display_name', user_id)
        else:
            display_name = getattr(user, 'display_name', user_id)

        await sio.emit("auth_success", {
            "user_id": user_id,
            "display_name": display_name,
            "recent_sessions": [
                {
                    "session_id": session.session_id,
                    "title": session.title or f"Session {session.session_id[:8]}",
                    "created_at": session.created_at.isoformat() if session.created_at and hasattr(session.created_at, 'isoformat') else str(session.created_at),
                    "updated_at": session.updated_at.isoformat() if session.updated_at and hasattr(session.updated_at, 'isoformat') else str(session.updated_at),
                    "total_messages": session.total_messages
                }
                for session in recent_sessions
            ]
        }, room=sid)

    except Exception as e:
        logger.error(f"‚ùå Authentication error: {e}")
        await sio.emit("auth_error", {
            "error": str(e)
        }, room=sid)


@sio.event
async def create_session(sid, data):
    """Create a new chat session."""
    try:
        user_id = connected_clients[sid].get("user_id")
        if not user_id:
            await sio.emit("error", {
                "error": "User not authenticated"
            }, room=sid)
            return
        
        session_id = data.get("session_id") or str(uuid.uuid4())
        
        # Create new session
        chat_session = create_chat_session(user_id, session_id)
        
        # Update client info
        connected_clients[sid]["session_id"] = session_id
        
        await sio.emit("session_created", {
            "session_id": session_id,
            "title": chat_session.title or f"Session {session_id[:8]}",
            "created_at": chat_session.created_at.isoformat() if chat_session.created_at and hasattr(chat_session.created_at, 'isoformat') else str(chat_session.created_at)
        }, room=sid)
        
        logger.info(f"üìù Created session {session_id} for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Session creation error: {e}")
        await sio.emit("error", {
            "error": str(e)
        }, room=sid)


@sio.event
async def join_session(sid, data):
    """Join an existing chat session."""
    try:
        user_id = connected_clients[sid].get("user_id")
        session_id = data.get("session_id")
        
        if not user_id or not session_id:
            await sio.emit("error", {
                "error": "User not authenticated or session_id missing"
            }, room=sid)
            return
        
        # Update client info
        connected_clients[sid]["session_id"] = session_id
        
        # Get conversation context
        context = get_conversation_context(session_id, max_messages=20)
        
        await sio.emit("session_joined", {
            "session_id": session_id,
            "conversation_history": context
        }, room=sid)
        
        logger.info(f"üìù User {user_id} joined session {session_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Session join error: {e}")
        await sio.emit("error", {
            "error": str(e)
        }, room=sid)


@sio.event
async def process_message(sid, data):
    """Process user message through multi-agent system."""
    try:
        user_id = connected_clients[sid].get("user_id")
        session_id = connected_clients[sid].get("session_id")
        
        if not user_id or not session_id:
            await sio.emit("error", {
                "error": "User not authenticated or no active session"
            }, room=sid)
            return
        
        user_input = data.get("message", "").strip()
        if not user_input:
            await sio.emit("error", {
                "error": "Message cannot be empty"
            }, room=sid)
            return
        
        # Emit processing started
        await sio.emit("processing_started", {
            "message": "Processing your request...",
            "timestamp": time.time()
        }, room=sid)
        
        # Get conversation context for agents
        conversation_context = get_conversation_context(session_id, max_messages=5)
        
        # Create initial state with context
        initial_state = create_initial_state(user_input)
        initial_state["conversation_context"] = conversation_context
        initial_state["user_id"] = user_id
        initial_state["session_id"] = session_id
        
        # Process through agent graph
        start_time = time.time()
        if agent_graph:
            result_state = agent_graph.invoke(initial_state)
        else:
            raise Exception("Agent graph not initialized")
        processing_time = (time.time() - start_time) * 1000  # Convert to milliseconds
        
        # Prepare response data
        response_data = {
            "user_input": user_input,
            "agent_response": result_state.get("final_result"),
            "primary_intent": result_state.get("primary_intent"),
            "processing_mode": result_state.get("processing_mode"),
            "detected_intents": [
                {
                    "intent": intent.intent,
                    "confidence": intent.confidence,
                    "reasoning": intent.reasoning
                }
                for intent in result_state.get("detected_intents", [])
            ],
            "execution_summary": result_state.get("execution_summary"),
            "processing_time": processing_time,
            "success": not result_state.get("errors") or len(result_state.get("errors", [])) == 0,
            "errors": result_state.get("errors"),
            "timestamp": time.time()
        }
        
        # Save to database
        processing_data = {
            "detected_intents": response_data["detected_intents"],
            "primary_intent": response_data["primary_intent"],
            "processing_mode": response_data["processing_mode"],
            "agent_results": result_state.get("agent_results"),
            "execution_summary": response_data["execution_summary"],
            "processing_time": int(processing_time),
            "errors": response_data["errors"],
            "success": response_data["success"]
        }
        
        save_chat_message(
            session_id=session_id,
            user_input=user_input,
            agent_response=response_data["agent_response"],
            processing_data=processing_data
        )
        
        # Emit response
        await sio.emit("message_response", response_data, room=sid)
        
        logger.info(f"‚úÖ Processed message for user {user_id} in session {session_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Message processing error: {e}")
        await sio.emit("processing_error", {
            "error": str(e),
            "timestamp": time.time()
        }, room=sid)


@sio.event
async def get_session_history(sid, data):
    """Get conversation history for a session."""
    try:
        session_id = data.get("session_id")
        if not session_id:
            await sio.emit("error", {
                "error": "session_id is required"
            }, room=sid)
            return
        
        context = get_conversation_context(session_id, max_messages=50)
        
        await sio.emit("session_history", {
            "session_id": session_id,
            "history": context
        }, room=sid)
        
    except Exception as e:
        logger.error(f"‚ùå Get session history error: {e}")
        await sio.emit("error", {
            "error": str(e)
        }, room=sid)


@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": "Multi-Agent SocketIO Server",
        "version": "1.0.0",
        "connected_clients": len(connected_clients)
    }


# Health check via SocketIO event
@sio.event
async def health_check(sid):
    """Health check via SocketIO."""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "connected_clients": len(connected_clients),
        "agent_graph_ready": agent_graph is not None
    }


# Initialize on startup
async def startup():
    """Initialize on startup."""
    await initialize_agent_graph()

# Add startup event
@app.on_event("startup")
async def startup_event():
    await startup()


if __name__ == "__main__":
    import eventlet
    eventlet.monkey_patch()

    # Use eventlet WSGI server for SocketIO
    print("üöÄ Starting SocketIO server on port 8001...")
    eventlet.wsgi.server(eventlet.listen(('0.0.0.0', 8001)), socketio_wsgi_app)
