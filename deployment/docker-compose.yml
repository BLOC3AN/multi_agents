version: '3.8'

services:
  # Main Multi-Agent System API
  multi-agent-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: multi-agent-api
    ports:
      - "8000:8000"

    env_file:
      - ../.env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - multi-agent-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.multi-agent-api.rule=Host(`api.localhost`)"
      - "traefik.http.services.multi-agent-api.loadbalancer.server.port=8000"

  # SocketIO Server for real-time communication
  socketio-server:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.socketio
    container_name: multi-agent-socketio
    ports:
      - "8001:8001"
    env_file:
      - ../.env    
    environment:
      # Only essential Docker-specific variables
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 8001)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - multi-agent-network
    depends_on:
      - redis

  # Streamlit GUI
  streamlit-gui:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.gui
    container_name: multi-agent-gui
    ports:
      - "8501:8501"
    env_file:
      - ../.env
    environment:
      # Only essential Docker-specific variables
      - PYTHONPATH=/app
      - SOCKETIO_SERVER_URL=http://multi-agent-socketio:8001
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - multi-agent-network
    depends_on:
      - socketio-server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.multi-agent-gui.rule=Host(`gui.localhost`)"
      - "traefik.http.services.multi-agent-gui.loadbalancer.server.port=8501"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: multi-agent-redis
    ports:
      - "6379:6379"
    # Redis password will be read from .env via load_dotenv() if needed
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multi-agent-network
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: multi-agent-nginx
    ports:
      #- "80:80"
      - "3308:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - multi-agent-api
    networks:
      - multi-agent-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: multi-agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - multi-agent-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: multi-agent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - multi-agent-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  multi-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
